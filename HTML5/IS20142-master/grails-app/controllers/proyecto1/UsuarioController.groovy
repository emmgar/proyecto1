package proyecto1import static org.springframework.http.HttpStatus.*import grails.transaction.Transactional@Transactional(readOnly = true)class UsuarioController {    def loginService    def login = {    def user = session.user    if (user) {      flash.message = flash.message      switch (user.tipo) {      case 1:        redirect(controller:"alumno", action:"show", id:user.id)        break      case 2:        redirect(controller:"profesor", action:"show", id:user.id)        break      case 3:        redirect(controller:"curso", action:"show")        break      }          }else{      //flash.message = "Sorry, ${params.login}. Please try again."      //redirect(action:"authenticate")    }  }  def authenticate = {    def user = loginService.doLogin(params.login, params.password)    session.user = user;    if (user) {      switch (user.tipo) {      case 1:        redirect(controller:"alumno", action:"show", id:user.id)        break      case 2:        redirect(controller:"profesor", action:"show", id:user.id)        break      case 3:        redirect(controller:"curso", action:"show")        break      }      //redirect(controller:"alumno", action:"show", id:user.id)    } else {      redirect(action:"login")    }  }  def logout = {    flash.message = "Has cerrado sesión con éxito!, Hasta luego ${session.user.usuario}"    session.user = null    redirect(action:"login")  }  static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]  def index(Integer max) {    params.max = Math.min(max ?: 10, 100)    respond Usuario.list(params), model:[usuarioInstanceCount: Usuario.count()]  }  def show(Usuario usuarioInstance) {    respond usuarioInstance  }  def create() {    respond new Usuario(params)  }      def saveTmpUser(Usuario usuarioInstance) {    println "Controller usuario: "    println "usuario: " + usuarioInstance.usuario    println "passwd: " + usuarioInstance.passwd    println "tipo:" + usuarioInstance.tipo        if (usuarioInstance.hasErrors() ||  !usuarioInstance.validate()) {      //println "No paso la validacion"      //println usuarioInstance.errors      respond usuarioInstance.errors, view:'create'      return    }        session.userTmp = usuarioInstance    //println "Controller usuario -----"    def auxTipo = 1    if (usuarioInstance.tipo == auxTipo) { // tipo =1      redirect(controller:"alumno", action:"create" )    } else { //tipo=2"      redirect(controller:"profesor", action:"create")    }  }  @Transactional  def save(Usuario usuarioInstance) {    if (usuarioInstance == null) {      notFound()      return    }    if (usuarioInstance.hasErrors()) {      respond usuarioInstance.errors, view:'create'      return    }    usuarioInstance.save flush:true    request.withFormat {      form multipartForm {        flash.message = message(code: 'default.created.message', args: [message(code: 'usuarioInstance.label', default: 'Usuario'), usuarioInstance.id])        redirect usuarioInstance      }            '*' { respond usuarioInstance, [status: CREATED] }    }  }  def edit(Usuario usuarioInstance) {    respond usuarioInstance  }  @Transactional  def update(Usuario usuarioInstance) {    if (usuarioInstance == null) {      notFound()      return    }    if (usuarioInstance.hasErrors()) {      respond usuarioInstance.errors, view:'edit'      return        }    usuarioInstance.save flush:true    request.withFormat {      form multipartForm {        flash.message = message(code: 'default.updated.message', args: [message(code: 'Usuario.label', default: 'Usuario'), usuarioInstance.id])        redirect usuarioInstance      }            '*'{ respond usuarioInstance, [status: OK] }    }  }  @Transactional  def delete(Usuario usuarioInstance) {    if (usuarioInstance == null) {      notFound()      return    }    usuarioInstance.delete flush:true    request.withFormat {      form multipartForm {        flash.message = message(code: 'default.deleted.message', args: [message(code: 'Usuario.label', default: 'Usuario'), usuarioInstance.id])        redirect action:"index", method:"GET"      }            '*'{ render status: NO_CONTENT }    }  }  protected void notFound() {    request.withFormat {      form multipartForm {        flash.message = message(code: 'default.not.found.message', args: [message(code: 'usuarioInstance.label', default: 'Usuario'), params.id])        redirect action: "index", method: "GET"      }            '*'{ render status: NOT_FOUND }    }  }}